(()=>{var t={916:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"0cc67b926321b46c35cc929178804e2f.svg"},913:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.isEnvironmentValid=t=>this.environments.includes(t),this.setEnvironment=t=>{t&&this.isEnvironmentValid(t)&&(this.environment=t,t===this.environmentStaging?(this.apiUrl=this.apiUrlStaging,this.eventsUrl=this.eventsUrlStaging):t===this.environmentLocal?(this.apiUrl=this.apiUrlLocal,this.eventsUrl=this.eventsUrlLocal):t===this.environmentProduction&&(this.apiUrl=this.apiUrlProduction,this.eventsUrl=this.eventsUrlProduction))},this.environmentLocal="local",this.environmentStaging="staging",this.environmentProduction="production",this.apiUrl="https://api.tonicpow.com",this.apiUrlLocal="http://localhost:3000",this.apiUrlStaging="https://api.staging.tonicpow.com",this.apiUrlProduction="https://api.tonicpow.com",this.eventsUrl="https://events.tonicpow.com",this.eventsUrlLocal="http://localhost:3002",this.eventsUrlStaging="https://events.staging.tonicpow.com",this.eventsUrlProduction="https://events.tonicpow.com",this.customEnvironmentAttribute="data-environment",this.environment="",this.environments=[this.environmentLocal,this.environmentStaging,this.environmentProduction],this.maxSessionDays=60,this.sessionName="tncpw_session",this.version="v0.0.8",this.widgetDivClass="tonicpow-widget",this.widgetIdAttribute="data-widget-id"}}}.apply(e,[i,e]))||(t.exports=n)},242:function(t,e,i){var n,o=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(o,s){function r(t){try{a(n.next(t))}catch(t){s(t)}}function c(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,c)}a((n=n.apply(t,e||[])).next())}))};void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e){this.detectWidgetClick=()=>{document.addEventListener("click",(t=>o(this,void 0,void 0,(function*(){var e,i,n=(t||window.event).target;let o=null===(e=null==n?void 0:n.parentElement)||void 0===e?void 0:e.parentElement;if(null===(i=null==o?void 0:o.classList)||void 0===i?void 0:i.contains("tonicpow-widget"))try{yield this.sendEvent("click",o.getAttribute("widget-id")||"")}catch(t){console.error("failed to report interaction: click",t)}}))))},this.detectBounce=()=>{window.onbeforeunload=()=>{this.sendEvent("bounce",((new Date).getTime()-this.start).toString())}},this.detectInteraction=()=>{document.addEventListener("mousedown",(()=>o(this,void 0,void 0,(function*(){if(!this.interactionSent)try{yield this.sendEvent("interaction","mousedown"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: mousedown",t)}})))),document.addEventListener("scroll",(()=>o(this,void 0,void 0,(function*(){if(!this.interactionSent)try{yield this.sendEvent("interaction","scroll"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: scroll",t)}})))),document.addEventListener("keypress",(()=>o(this,void 0,void 0,(function*(){if(!this.interactionSent)try{yield this.sendEvent("interaction","keypress"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: keypress",t)}}))))},this.sendEvent=(t,e)=>o(this,void 0,void 0,(function*(){if(!this.sessionId)return void console.info("you must call init with a session before sending events");let i={v:this.config.version,name:t,tncpw_session:this.sessionId,data:e};yield fetch(`${this.config.eventsUrl}/v1/events?d=${btoa(JSON.stringify(i))}`,{method:"get"})})),this.sessionId=t,this.config=e,this.interactionSent=!1,this.start=(new Date).getTime(),this.detectInteraction(),this.detectBounce(),this.detectWidgetClick()}}}.apply(e,[i,e]))||(t.exports=n)},607:function(t,e,i){var n,o,s=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(o,s){function r(t){try{a(n.next(t))}catch(t){s(t)}}function c(t){try{a(n.throw(t))}catch(t){s(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,c)}a((n=n.apply(t,e||[])).next())}))},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(916),i(913),i(242),i(912)],void 0===(o=function(t,e,i,n,o,c){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=r(i),n=r(n),o=r(o),c=r(c);class a{constructor(t){this.registerEvents=()=>{if(!this.events){let t=this.getVisitorSession();t&&t.length&&(this.events=new o.default(t,this.config))}},this.setOreo=(t,e,i)=>{const n=new Date;n.setTime(n.getTime()+864e5*i),document.cookie=`${t}=${e};path=/;expires=${n.toUTCString()}`},this.captureVisitorSession=(t="")=>{let e=t;return t&&t.length||"undefined"==typeof window||(e=new URLSearchParams(window.location.search).get(this.config.sessionName)||""),e&&e.length>0?(this.setOreo(this.config.sessionName,e,this.config.maxSessionDays),this.storage.setStorage(this.config.sessionName,e,86400*this.config.maxSessionDays),e):null},this.getVisitorSession=()=>this.storage.getStorage(this.config.sessionName),this.loadDivs=()=>s(this,void 0,void 0,(function*(){const t=document.getElementsByClassName(this.config.widgetDivClass);for(let n=t.length-1;n>=0;n--){const o=t[n];if(!o){console.log("exit early - remove this?");continue}const s=o.getAttribute(this.config.widgetIdAttribute);if(!s){console.log(`${s} not found`);continue}const r=o.getAttribute(this.config.customEnvironmentAttribute);this.config.setEnvironment(r||"production"),this.widgets.set(s,null);try{const t=yield fetch(`${this.config.apiUrl}/v1/widgets/display/${s}?provider=embed-${this.config.version}`);var e;403===t.status?(console.info(`${t.status}: Domain not allowed`),e={link_url:"https://tonicpow.com",image_url:i.default}):e=yield t.json();const n=encodeURIComponent(e.title);o.innerHTML=`\n      <a href="${e.link_url}?utm_source=tonicpow-widgets&utm_medium=widget&utm_campaign=${s}&utm_content=${n}" style="display: inline-block">\n      <img src="${e.image_url}" \n      width="${e.width}" \n      height="${e.height}" \n      alt="${e.title}" />\n      </a>`,o.setAttribute("data-width",e.width),o.setAttribute("data-height",e.height),this.widgets.set(s,e),this.options&&this.options.onWidgetLoaded&&(e.id=s,this.options.onWidgetLoaded(e))}catch(t){throw t}}})),this.load=()=>s(this,void 0,void 0,(function*(){if("undefined"==typeof window)return void console.error("TonicPow embed only works in the browser");const t=document.getElementsByClassName(this.config.widgetDivClass);if(t&&t.length>0)try{yield this.loadDivs(),console.log("%c TonicPow widget(s) loaded! ","background: #974CD2; color: #fff")}catch(t){throw t}const e=this.captureVisitorSession();e&&(this.events=new o.default(e,this.config))})),this.config=new n.default,this.storage=new c.default,this.widgets=new Map,this.options=t,"complete"===document.readyState||"interactive"===document.readyState?(this.load(),this.registerEvents()):document.addEventListener("DOMContentLoaded",(()=>{this.load(),this.registerEvents()}))}}e.default=a;var l=new a;window.TonicPow=l||{}}.apply(e,n))||(t.exports=o)},912:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.removeStorage=t=>{try{localStorage.removeItem(t),localStorage.removeItem(`${t}_expiresIn`)}catch(e){return console.log(`removeStorage: Error removing key [${t}] from localStorage: ${JSON.stringify(e)}`),!1}return!0},this.getStorage=t=>{const e=Date.now();let i;try{i=localStorage.getItem(`${t}_expires`)}catch(t){return console.log(`getItem: error getting localStorage: ${JSON.stringify(t)}`),null}if(null==i&&(i=0),i<e)return this.removeStorage(t),null;try{return localStorage.getItem(t)}catch(e){return console.log(`getStorage: Error reading key [${t}] from localStorage: ${JSON.stringify(e)}`),null}},this.setStorage=(t,e,i=null)=>{i=i?Math.abs(i):86400;const n=Date.now()+1e3*i;try{localStorage.setItem(t,e),localStorage.setItem(`${t}_expires`,n.toString())}catch(e){return console.log(`setStorage: Error setting key [${t}] in localStorage: ${JSON.stringify(e)}`),!1}return!0}}}}.apply(e,[i,e]))||(t.exports=n)}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.p="",i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,