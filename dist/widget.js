(()=>{var t={913:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.isEnvironmentValid=t=>this.environments.includes(t),this.setEnvironment=t=>{t&&this.isEnvironmentValid(t)&&(this.environment=t,t===this.environmentStaging?(this.apiUrl=this.apiUrlStaging,this.eventsUrl=this.eventsUrlStaging):t===this.environmentLocal?(this.apiUrl=this.apiUrlLocal,this.eventsUrl=this.eventsUrlLocal):t===this.environmentProduction&&(this.apiUrl=this.apiUrlProduction,this.eventsUrl=this.eventsUrlProduction))},this.environmentLocal="local",this.environmentStaging="staging",this.environmentProduction="production",this.apiUrl="https://api.tonicpow.com",this.apiUrlLocal="http://localhost:3000",this.apiUrlStaging="https://api.staging.tonicpow.com",this.apiUrlProduction="https://api.tonicpow.com",this.eventsUrl="https://events.tonicpow.com",this.eventsUrlLocal="http://localhost:3002",this.eventsUrlStaging="https://events.staging.tonicpow.com",this.eventsUrlProduction="https://events.tonicpow.com",this.customEnvironment="data-environment",this.environment="",this.environments=[this.environmentLocal,this.environmentStaging,this.environmentProduction],this.maxSessionDays=60,this.sessionName="tncpw_session",this.version="v0.0.8",this.widgetDivClass="tonicpow-widget",this.widgetId="data-widget-id"}}}.apply(e,[i,e]))||(t.exports=n)},242:function(t,e,i){var n,o,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(913)],void 0===(o=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i),e.default=class{constructor(t){this.detectBounce=()=>{window.onbeforeunload=()=>{this.sendEvent("bounce",((new Date).getTime()-this.start).toString())}},this.detectInteraction=()=>{let t=!1;document.addEventListener("mousedown",(async()=>{if(!t)try{await this.sendEvent("interaction","mousedown"),t=!0}catch(t){console.error("failed to report interaction: mousedown",t)}})),document.addEventListener("scroll",(async()=>{if(!t)try{await this.sendEvent("interaction","scroll"),t=!0}catch(t){console.error("failed to report interaction: scroll",t)}})),document.addEventListener("keypress",(async()=>{if(!t)try{await this.sendEvent("interaction","keypress"),t=!0}catch(t){console.error("failed to report interaction: keypress",t)}})),document.addEventListener("click",(async()=>{if(!t)try{await this.sendEvent("interaction","click"),t=!0}catch(t){console.error("failed to report interaction: click",t)}}))},this.sendEvent=async(t,e)=>{if(!this.sessionId)return void console.info("you must call init with a session before sending events");let n=new i.default;await fetch(`${n.eventsUrl}/v1/events?v=${n.version}&name=${t}&tncpw_session=${this.sessionId}&data=${e}`,{method:"get"})},this.sessionId=t,this.start=(new Date).getTime(),this.detectInteraction(),this.detectBounce()}}}.apply(e,n))||(t.exports=o)},607:function(t,e,i){var n,o,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(913),i(242),i(912)],void 0===(o=function(t,e,i,n,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i),n=s(n),o=s(o);const r={AutoInit:!0};class a{constructor(t=r){this.registerEvents=()=>{let t=this.getVisitorSession();t&&(console.log("registering session",t),this.events=new n.default(t))},this.setOreo=(t,e,i)=>{const n=new Date;n.setTime(n.getTime()+864e5*i),document.cookie=`${t}=${e};path=/;expires=${n.toUTCString()}`},this.captureVisitorSession=(t="")=>{let e=t;return t&&t.length||"undefined"==typeof window||(e=new URLSearchParams(window.location.search).get(this.config.sessionName)||""),e&&e.length>0?(this.setOreo(this.config.sessionName,e,this.config.maxSessionDays),this.storage.setStorage(this.config.sessionName,e,86400*this.config.maxSessionDays),e):null},this.getVisitorSession=()=>this.storage.getStorage(this.config.sessionName),this.loadDivs=async()=>{const t=document.getElementsByClassName(this.config.widgetDivClass);for(let e=t.length-1;e>=0;e--){const i=t[e],n=i.getAttribute(this.config.widgetId);if(!n){console.log(`${n} not found`);continue}const o=i.getAttribute(this.config.customEnvironment);this.config.setEnvironment(o||"production");const s=await fetch(`${this.config.apiUrl}/v1/widgets/display/${n}?provider=embed-${this.config.version}`),r=await s.json(),a=encodeURIComponent(r.title);i.innerHTML=`\n    <a href="${r.link_url}?utm_source=tonicpow-widgets&utm_medium=widget&utm_campaign=${n}&utm_content=${a}">\n      <img src="${r.image_url}" \n      width="${r.width}" \n      height="${r.height}" \n      alt="${r.title}" />\n    </a>`,i.setAttribute("data-width",r.width),i.setAttribute("data-height",r.height)}},this.load=()=>{if("undefined"==typeof window)return void console.error("TonicPow embed only works in the browser");const t=document.getElementsByClassName(this.config.widgetDivClass);t&&t.length>0&&this.loadDivs().then((()=>{console.log("TonicPow widget(s) loaded!")}));const e=this.captureVisitorSession();e&&(this.events=new n.default(e))};for(let[e,i]of Object.entries(t))Object.defineProperty(this,e,{value:i,writable:!1});this.config=new i.default,this.storage=new o.default,t.AutoInit&&("complete"===document.readyState||"interactive"===document.readyState?(this.load(),this.registerEvents()):document.addEventListener("DOMContentLoaded",(()=>{this.load(),this.registerEvents()})))}}e.default=a,window.TonicPow=a||{}}.apply(e,n))||(t.exports=o)},912:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.removeStorage=t=>{try{localStorage.removeItem(t),localStorage.removeItem(`${t}_expiresIn`)}catch(e){return console.log(`removeStorage: Error removing key [${t}] from localStorage: ${JSON.stringify(e)}`),!1}return!0},this.getStorage=t=>{const e=Date.now();let i;try{i=localStorage.getItem(`${t}_expires`)}catch(t){return console.log(`getItem: error getting localStorage: ${JSON.stringify(t)}`),null}if(null==i&&(i=0),i<e)return this.removeStorage(t),null;try{return localStorage.getItem(t)}catch(e){return console.log(`getStorage: Error reading key [${t}] from localStorage: ${JSON.stringify(e)}`),null}},this.setStorage=(t,e,i=null)=>{i=i?Math.abs(i):86400;const n=Date.now()+1e3*i;try{localStorage.setItem(t,e),localStorage.setItem(`${t}_expires`,n.toString())}catch(e){return console.log(`setStorage: Error setting key [${t}] in localStorage: ${JSON.stringify(e)}`),!1}return!0}}}}.apply(e,[i,e]))||(t.exports=n)}},e={};!function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,