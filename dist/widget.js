(()=>{var t={916:(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i.p+"0cc67b926321b46c35cc929178804e2f.svg"},913:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.isEnvironmentValid=t=>this.environments.includes(t),this.setEnvironment=t=>{t&&this.isEnvironmentValid(t)&&(this.environment=t,t===this.environmentStaging?(this.apiUrl=this.apiUrlStaging,this.eventsUrl=this.eventsUrlStaging):t===this.environmentLocal?(this.apiUrl=this.apiUrlLocal,this.eventsUrl=this.eventsUrlLocal):t===this.environmentProduction&&(this.apiUrl=this.apiUrlProduction,this.eventsUrl=this.eventsUrlProduction))},this.environmentLocal="local",this.environmentStaging="staging",this.environmentProduction="production",this.apiUrl="https://api.tonicpow.com",this.apiUrlLocal="http://localhost:3000",this.apiUrlStaging="https://api.staging.tonicpow.com",this.apiUrlProduction="https://api.tonicpow.com",this.eventsUrl="https://events.tonicpow.com",this.eventsUrlLocal="http://localhost:3002",this.eventsUrlStaging="https://events.staging.tonicpow.com",this.eventsUrlProduction="https://events.tonicpow.com",this.customEnvironment="data-environment",this.environment="",this.environments=[this.environmentLocal,this.environmentStaging,this.environmentProduction],this.maxSessionDays=60,this.sessionName="tncpw_session",this.version="v0.0.8",this.widgetDivClass="tonicpow-widget",this.widgetId="data-widget-id"}}}.apply(e,[i,e]))||(t.exports=n)},242:function(t,e,i){var n,o,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(913)],void 0===(o=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i),e.default=class{constructor(t){this.detectWidgetClick=()=>{document.addEventListener("click",(async t=>{let e=(t||window.event).target?.parentElement?.parentElement;if(e?.classList?.contains("tonicpow-widget"))try{await this.sendEvent("click",e.getAttribute("widget-id")||"")}catch(t){console.error("failed to report interaction: click",t)}}))},this.detectBounce=()=>{window.onbeforeunload=()=>{this.sendEvent("bounce",((new Date).getTime()-this.start).toString())}},this.detectInteraction=()=>{document.addEventListener("mousedown",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","mousedown"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: mousedown",t)}})),document.addEventListener("scroll",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","scroll"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: scroll",t)}})),document.addEventListener("keypress",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","keypress"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: keypress",t)}}))},this.sendEvent=async(t,e)=>{if(!this.sessionId)return void console.info("you must call init with a session before sending events");let n=new i.default,o={v:n.version,name:t,tncpw_session:this.sessionId,data:e};await fetch(`${n.eventsUrl}/v1/events?d=${btoa(JSON.stringify(o))}`,{method:"get"})},this.sessionId=t,this.interactionSent=!1,this.start=(new Date).getTime(),this.detectInteraction(),this.detectBounce(),this.detectWidgetClick()}}}.apply(e,n))||(t.exports=o)},607:function(t,e,i){var n,o,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(916),i(913),i(242),i(912)],void 0===(o=function(t,e,i,n,o,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=s(i),n=s(n),o=s(o),r=s(r);class a{constructor(t){this.registerEvents=()=>{if(!this.events){let t=this.getVisitorSession();t&&t.length&&(this.events=new o.default(t))}},this.setOreo=(t,e,i)=>{const n=new Date;n.setTime(n.getTime()+864e5*i),document.cookie=`${t}=${e};path=/;expires=${n.toUTCString()}`},this.captureVisitorSession=(t="")=>{let e=t;return t&&t.length||"undefined"==typeof window||(e=new URLSearchParams(window.location.search).get(this.config.sessionName)||""),e&&e.length>0?(this.setOreo(this.config.sessionName,e,this.config.maxSessionDays),this.storage.setStorage(this.config.sessionName,e,86400*this.config.maxSessionDays),e):null},this.getVisitorSession=()=>this.storage.getStorage(this.config.sessionName),this.loadDivs=async()=>{const t=document.getElementsByClassName(this.config.widgetDivClass);for(let n=t.length-1;n>=0;n--){const o=t[n];if(!o)continue;const s=o.getAttribute(this.config.widgetId);if(!s){console.log(`${s} not found`);continue}const r=o.getAttribute(this.config.customEnvironment);this.config.setEnvironment(r||"production"),this.widgets.set(s,null);try{const t=await fetch(`${this.config.apiUrl}/v1/widgets/display/${s}?provider=embed-${this.config.version}`);var e;403===t.status?(console.info(`${t.status}: Domain not allowed`),e={link_url:"https://tonicpow.com",image_url:i.default}):e=await t.json();const n=encodeURIComponent(e.title);o.innerHTML=`\n      <a href="${e.link_url}?utm_source=tonicpow-widgets&utm_medium=widget&utm_campaign=${s}&utm_content=${n}" style="display: block">\n      <img src="${e.image_url}" \n      id="${s}"\n      width="${e.width}" \n      height="${e.height}" \n      alt="${e.title}" />\n      </a>`,o.setAttribute("data-width",e.width),o.setAttribute("data-height",e.height),this.widgets.set(s,e),this.options&&this.options.widgetsChangedCallback&&this.options.widgetsChangedCallback(s,e)}catch(t){throw t}}},this.load=async()=>{if("undefined"==typeof window)return void console.error("TonicPow embed only works in the browser");const t=document.getElementsByClassName(this.config.widgetDivClass);if(t&&t.length>0)try{await this.loadDivs(),console.log("%c TonicPow widget(s) loaded! ","background: #974CD2; color: #fff")}catch(t){throw t}const e=this.captureVisitorSession();e&&(this.events=new o.default(e))},this.config=new n.default,this.storage=new r.default,this.widgets=new Map,this.options=t,"complete"===document.readyState||"interactive"===document.readyState?(this.load(),this.registerEvents()):document.addEventListener("DOMContentLoaded",(()=>{this.load(),this.registerEvents()}))}}var c;e.default=a;try{c=new a}catch(t){console.log("errrmagord",t)}window.TonicPow=c||{}}.apply(e,n))||(t.exports=o)},912:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.removeStorage=t=>{try{localStorage.removeItem(t),localStorage.removeItem(`${t}_expiresIn`)}catch(e){return console.log(`removeStorage: Error removing key [${t}] from localStorage: ${JSON.stringify(e)}`),!1}return!0},this.getStorage=t=>{const e=Date.now();let i;try{i=localStorage.getItem(`${t}_expires`)}catch(t){return console.log(`getItem: error getting localStorage: ${JSON.stringify(t)}`),null}if(null==i&&(i=0),i<e)return this.removeStorage(t),null;try{return localStorage.getItem(t)}catch(e){return console.log(`getStorage: Error reading key [${t}] from localStorage: ${JSON.stringify(e)}`),null}},this.setStorage=(t,e,i=null)=>{i=i?Math.abs(i):86400;const n=Date.now()+1e3*i;try{localStorage.setItem(t,e),localStorage.setItem(`${t}_expires`,n.toString())}catch(e){return console.log(`setStorage: Error setting key [${t}] in localStorage: ${JSON.stringify(e)}`),!1}return!0}}}}.apply(e,[i,e]))||(t.exports=n)}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,