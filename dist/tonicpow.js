(()=>{var t={913:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.isEnvironmentValid=t=>this.environments.includes(t),this.setEnvironment=t=>{t&&this.isEnvironmentValid(t)&&(this.environment=t,t===this.environmentStaging?(this.apiUrl=this.apiUrlStaging,this.eventsUrl=this.eventsUrlStaging):t===this.environmentLocal?(this.apiUrl=this.apiUrlLocal,this.eventsUrl=this.eventsUrlLocal):t===this.environmentProduction&&(this.apiUrl=this.apiUrlProduction,this.eventsUrl=this.eventsUrlProduction))},this.environmentLocal="local",this.environmentStaging="staging",this.environmentProduction="production",this.apiUrl="https://api.tonicpow.com",this.apiUrlLocal="http://localhost:3000",this.apiUrlStaging="https://api.staging.tonicpow.com",this.apiUrlProduction="https://api.tonicpow.com",this.eventsUrl="https://events.tonicpow.com",this.eventsUrlLocal="http://localhost:3002",this.eventsUrlStaging="https://events.staging.tonicpow.com",this.eventsUrlProduction="https://events.tonicpow.com",this.customEnvironment="data-environment",this.environment="",this.environments=[this.environmentLocal,this.environmentStaging,this.environmentProduction],this.maxSessionDays=60,this.sessionName="tncpw_session",this.version="v0.0.8",this.widgetDivClass="tonicpow-widget",this.widgetId="data-widget-id"}}}.apply(e,[i,e]))||(t.exports=n)},242:function(t,e,i){var n,s,o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(913)],void 0===(s=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=o(i),e.default=class{constructor(t){this.detectWidgetClick=()=>{document.addEventListener("click",(async t=>{if(((t=t||window.event).target||t.srcElement)?.parentElement?.parentElement?.classList?.contains("tonicpow-widget"))try{this.interactionSent=!0,await this.sendEvent("interaction","click")}catch(t){console.error("failed to report interaction: click",t)}}))},this.detectBounce=()=>{window.onbeforeunload=()=>{this.sendEvent("bounce",((new Date).getTime()-this.start).toString())}},this.detectInteraction=()=>{document.addEventListener("mousedown",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","mousedown"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: mousedown",t)}})),document.addEventListener("scroll",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","scroll"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: scroll",t)}})),document.addEventListener("keypress",(async()=>{if(!this.interactionSent)try{await this.sendEvent("interaction","keypress"),this.interactionSent=!0}catch(t){console.error("failed to report interaction: keypress",t)}}))},this.sendEvent=async(t,e)=>{if(!this.sessionId)return void console.info("you must call init with a session before sending events");let n=new i.default;await fetch(`${n.eventsUrl}/v1/events?v=${n.version}&name=${t}&tncpw_session=${this.sessionId}&data=${e}`,{method:"get"})},this.sessionId=t,this.interactionSent=!1,this.start=(new Date).getTime(),this.detectInteraction(),this.detectBounce(),this.detectWidgetClick()}}}.apply(e,n))||(t.exports=s)},607:function(t,e,i){var n,s,o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};n=[i,e,i(913),i(242),i(912)],void 0===(s=function(t,e,i,n,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i=o(i),n=o(n),s=o(s);class r{constructor(){this.registerEvents=()=>{if(!this.events){let t=this.getVisitorSession();t&&t.length&&(this.events=new n.default(t))}},this.setOreo=(t,e,i)=>{const n=new Date;n.setTime(n.getTime()+864e5*i),document.cookie=`${t}=${e};path=/;expires=${n.toUTCString()}`},this.captureVisitorSession=(t="")=>{let e=t;return t&&t.length||"undefined"==typeof window||(e=new URLSearchParams(window.location.search).get(this.config.sessionName)||""),e&&e.length>0?(this.setOreo(this.config.sessionName,e,this.config.maxSessionDays),this.storage.setStorage(this.config.sessionName,e,86400*this.config.maxSessionDays),e):null},this.getVisitorSession=()=>this.storage.getStorage(this.config.sessionName),this.loadDivs=async()=>{const t=document.getElementsByClassName(this.config.widgetDivClass);for(let e=t.length-1;e>=0;e--){const i=t[e];if(!i)continue;const n=i.getAttribute(this.config.widgetId);if(!n){console.log(`${n} not found`);continue}const s=i.getAttribute(this.config.customEnvironment);this.config.setEnvironment(s||"production"),this.widgets.set(n,null);try{const t=await fetch(`${this.config.apiUrl}/v1/widgets/display/${n}?provider=embed-${this.config.version}`),e=await t.json(),s=encodeURIComponent(e.title);i.innerHTML=`\n      <a href="${e.link_url}?utm_source=tonicpow-widgets&utm_medium=widget&utm_campaign=${n}&utm_content=${s}" style="display: block">\n      <img src="${e.image_url}" \n      id="${n}"\n      width="${e.width}" \n      height="${e.height}" \n      alt="${e.title}" />\n      </a>`,i.setAttribute("data-width",e.width),i.setAttribute("data-height",e.height),this.widgets.set(n,e)}catch(t){console.info("Could not display widget:",t)}}},this.load=async()=>{if("undefined"==typeof window)return void console.error("TonicPow embed only works in the browser");const t=document.getElementsByClassName(this.config.widgetDivClass);t&&t.length>0&&(await this.loadDivs(),console.log("%c TonicPow widget(s) loaded! ","background: #974CD2; color: #fff"));const e=this.captureVisitorSession();e&&(this.events=new n.default(e))},this.config=new i.default,this.storage=new s.default,this.widgets=new Map,"complete"===document.readyState||"interactive"===document.readyState?(this.load(),this.registerEvents()):document.addEventListener("DOMContentLoaded",(()=>{this.load(),this.registerEvents()}))}}e.default=r,window.TonicPow=new r||{}}.apply(e,n))||(t.exports=s)},912:(t,e,i)=>{var n;void 0===(n=function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.removeStorage=t=>{try{localStorage.removeItem(t),localStorage.removeItem(`${t}_expiresIn`)}catch(e){return console.log(`removeStorage: Error removing key [${t}] from localStorage: ${JSON.stringify(e)}`),!1}return!0},this.getStorage=t=>{const e=Date.now();let i;try{i=localStorage.getItem(`${t}_expires`)}catch(t){return console.log(`getItem: error getting localStorage: ${JSON.stringify(t)}`),null}if(null==i&&(i=0),i<e)return this.removeStorage(t),null;try{return localStorage.getItem(t)}catch(e){return console.log(`getStorage: Error reading key [${t}] from localStorage: ${JSON.stringify(e)}`),null}},this.setStorage=(t,e,i=null)=>{i=i?Math.abs(i):86400;const n=Date.now()+1e3*i;try{localStorage.setItem(t,e),localStorage.setItem(`${t}_expires`,n.toString())}catch(e){return console.log(`setStorage: Error setting key [${t}] in localStorage: ${JSON.stringify(e)}`),!1}return!0}}}}.apply(e,[i,e]))||(t.exports=n)}},e={};!function i(n){if(e[n])return e[n].exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdG9uaWNwb3cvd2lkZ2V0Ly4vc3JjL2NvbmZpZy50cyIsIndlYnBhY2s6Ly9AdG9uaWNwb3cvd2lkZ2V0Ly4vc3JjL2V2ZW50cy50cyIsIndlYnBhY2s6Ly9AdG9uaWNwb3cvd2lkZ2V0Ly4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL0B0b25pY3Bvdy93aWRnZXQvLi9zcmMvc3RvcmFnZS50cyIsIndlYnBhY2s6Ly9AdG9uaWNwb3cvd2lkZ2V0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0B0b25pY3Bvdy93aWRnZXQvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbImlzRW52aXJvbm1lbnRWYWxpZCIsImVudmlyb25tZW50IiwidGhpcyIsImVudmlyb25tZW50cyIsImluY2x1ZGVzIiwic2V0RW52aXJvbm1lbnQiLCJlbnZpcm9ubWVudFN0YWdpbmciLCJhcGlVcmwiLCJhcGlVcmxTdGFnaW5nIiwiZXZlbnRzVXJsIiwiZXZlbnRzVXJsU3RhZ2luZyIsImVudmlyb25tZW50TG9jYWwiLCJhcGlVcmxMb2NhbCIsImV2ZW50c1VybExvY2FsIiwiZW52aXJvbm1lbnRQcm9kdWN0aW9uIiwiYXBpVXJsUHJvZHVjdGlvbiIsImV2ZW50c1VybFByb2R1Y3Rpb24iLCJjdXN0b21FbnZpcm9ubWVudCIsIm1heFNlc3Npb25EYXlzIiwic2Vzc2lvbk5hbWUiLCJ2ZXJzaW9uIiwid2lkZ2V0RGl2Q2xhc3MiLCJ3aWRnZXRJZCIsInNlc3Npb25JZCIsImRldGVjdFdpZGdldENsaWNrIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiYXN5bmMiLCJlIiwid2luZG93IiwiZXZlbnQiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiaW50ZXJhY3Rpb25TZW50Iiwic2VuZEV2ZW50IiwiY29uc29sZSIsImVycm9yIiwiZGV0ZWN0Qm91bmNlIiwib25iZWZvcmV1bmxvYWQiLCJEYXRlIiwiZ2V0VGltZSIsInN0YXJ0IiwidG9TdHJpbmciLCJkZXRlY3RJbnRlcmFjdGlvbiIsImV2ZW50TmFtZSIsImRhdGEiLCJpbmZvIiwiY29uZmlnIiwiZmV0Y2giLCJtZXRob2QiLCJUb25pY1BvdyIsInJlZ2lzdGVyRXZlbnRzIiwiZXZlbnRzIiwic2Vzc2lvbiIsImdldFZpc2l0b3JTZXNzaW9uIiwibGVuZ3RoIiwic2V0T3JlbyIsIm5hbWUiLCJ2YWx1ZSIsImRheXMiLCJkYXRlIiwic2V0VGltZSIsImNvb2tpZSIsInRvVVRDU3RyaW5nIiwiY2FwdHVyZVZpc2l0b3JTZXNzaW9uIiwiY3VzdG9tU2Vzc2lvbklkIiwiVVJMU2VhcmNoUGFyYW1zIiwibG9jYXRpb24iLCJzZWFyY2giLCJnZXQiLCJzdG9yYWdlIiwic2V0U3RvcmFnZSIsImdldFN0b3JhZ2UiLCJsb2FkRGl2cyIsInRvbmljRGl2cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpIiwidG9uaWNEaXYiLCJnZXRBdHRyaWJ1dGUiLCJsb2ciLCJ3aWRnZXRzIiwic2V0IiwicHJvbWlzZSIsInJlc3BvbnNlIiwianNvbiIsImNhbXBhaWduVGl0bGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0aXRsZSIsImlubmVySFRNTCIsImxpbmtfdXJsIiwiaW1hZ2VfdXJsIiwid2lkdGgiLCJoZWlnaHQiLCJzZXRBdHRyaWJ1dGUiLCJsb2FkIiwiTWFwIiwicmVhZHlTdGF0ZSIsInJlbW92ZVN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImtleSIsIm5vdyIsImV4cGlyZXMiLCJnZXRJdGVtIiwiTWF0aCIsImFicyIsInNjaGVkdWxlIiwic2V0SXRlbSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCJdLCJtYXBwaW5ncyI6InlI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L0UsRUFFVCxPQUFPLE0saUNDMUZQcUYsRUFBMkIsSUFHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVUMsUUFHM0MsSUFBSUMsRUFBU0osRUFBeUJFLEdBQVksQ0FHakRDLFFBQVMsSUFPVixPQUhBRSxFQUFvQkgsR0FBVUksS0FBS0YsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHcEVHLEVBQU9ELFFDakJXRixDQUFvQixNIiwiZmlsZSI6InRvbmljcG93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29uZmlnIHtcclxuICBlbnZpcm9ubWVudExvY2FsOiBzdHJpbmdcclxuICBlbnZpcm9ubWVudFN0YWdpbmc6IHN0cmluZ1xyXG4gIGVudmlyb25tZW50UHJvZHVjdGlvbjogc3RyaW5nXHJcbiAgYXBpVXJsOiBzdHJpbmdcclxuICBhcGlVcmxMb2NhbDogc3RyaW5nXHJcbiAgYXBpVXJsU3RhZ2luZzogc3RyaW5nXHJcbiAgYXBpVXJsUHJvZHVjdGlvbjogc3RyaW5nXHJcbiAgZXZlbnRzVXJsOiBzdHJpbmdcclxuICBldmVudHNVcmxMb2NhbDogc3RyaW5nXHJcbiAgZXZlbnRzVXJsU3RhZ2luZzogc3RyaW5nXHJcbiAgZXZlbnRzVXJsUHJvZHVjdGlvbjogc3RyaW5nXHJcbiAgY3VzdG9tRW52aXJvbm1lbnQ6IHN0cmluZ1xyXG4gIGVudmlyb25tZW50OiBzdHJpbmdcclxuICBlbnZpcm9ubWVudHM6IHN0cmluZ1tdXHJcbiAgbWF4U2Vzc2lvbkRheXM6IG51bWJlclxyXG4gIHNlc3Npb25OYW1lOiBzdHJpbmdcclxuICB2ZXJzaW9uOiBzdHJpbmdcclxuICB3aWRnZXREaXZDbGFzczogc3RyaW5nXHJcbiAgd2lkZ2V0SWQ6IHN0cmluZ1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZW52aXJvbm1lbnRMb2NhbCA9ICdsb2NhbCdcclxuICAgIHRoaXMuZW52aXJvbm1lbnRTdGFnaW5nID0gJ3N0YWdpbmcnXHJcbiAgICB0aGlzLmVudmlyb25tZW50UHJvZHVjdGlvbiA9ICdwcm9kdWN0aW9uJ1xyXG5cclxuICAgIHRoaXMuYXBpVXJsID0gJ2h0dHBzOi8vYXBpLnRvbmljcG93LmNvbSdcclxuICAgIHRoaXMuYXBpVXJsTG9jYWwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJ1xyXG4gICAgdGhpcy5hcGlVcmxTdGFnaW5nID0gJ2h0dHBzOi8vYXBpLnN0YWdpbmcudG9uaWNwb3cuY29tJ1xyXG4gICAgdGhpcy5hcGlVcmxQcm9kdWN0aW9uID0gJ2h0dHBzOi8vYXBpLnRvbmljcG93LmNvbSdcclxuICAgIHRoaXMuZXZlbnRzVXJsID0gJ2h0dHBzOi8vZXZlbnRzLnRvbmljcG93LmNvbSdcclxuICAgIHRoaXMuZXZlbnRzVXJsTG9jYWwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAyJ1xyXG4gICAgdGhpcy5ldmVudHNVcmxTdGFnaW5nID0gJ2h0dHBzOi8vZXZlbnRzLnN0YWdpbmcudG9uaWNwb3cuY29tJ1xyXG4gICAgdGhpcy5ldmVudHNVcmxQcm9kdWN0aW9uID0gJ2h0dHBzOi8vZXZlbnRzLnRvbmljcG93LmNvbSdcclxuICAgIHRoaXMuY3VzdG9tRW52aXJvbm1lbnQgPSAnZGF0YS1lbnZpcm9ubWVudCdcclxuICAgIHRoaXMuZW52aXJvbm1lbnQgPSAnJ1xyXG4gICAgdGhpcy5lbnZpcm9ubWVudHMgPSBbdGhpcy5lbnZpcm9ubWVudExvY2FsLCB0aGlzLmVudmlyb25tZW50U3RhZ2luZywgdGhpcy5lbnZpcm9ubWVudFByb2R1Y3Rpb25dXHJcbiAgICB0aGlzLm1heFNlc3Npb25EYXlzID0gNjBcclxuICAgIHRoaXMuc2Vzc2lvbk5hbWUgPSAndG5jcHdfc2Vzc2lvbidcclxuICAgIHRoaXMudmVyc2lvbiA9ICd2MC4wLjgnXHJcbiAgICB0aGlzLndpZGdldERpdkNsYXNzID0gJ3RvbmljcG93LXdpZGdldCdcclxuICAgIHRoaXMud2lkZ2V0SWQgPSAnZGF0YS13aWRnZXQtaWQnXHJcbiAgfVxyXG5cclxuICAvLyBpc0Vudmlyb25tZW50VmFsaWQgd2lsbCBjaGVjayBpZiB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQgaXMgdmFsaWRcclxuICBpc0Vudmlyb25tZW50VmFsaWQgPSAoZW52aXJvbm1lbnQ6IHN0cmluZykgPT4gdGhpcy5lbnZpcm9ubWVudHMuaW5jbHVkZXMoZW52aXJvbm1lbnQpXHJcblxyXG4gIC8vIHNldEVudmlyb25tZW50IHdpbGwgc2V0IHRoZSBlbnZpcm9ubWVudFxyXG4gIHNldEVudmlyb25tZW50ID0gKGVudmlyb25tZW50OiBzdHJpbmcpID0+IHtcclxuICAgIC8vIE5vIGVudmlyb25tZW50IHNldD8gdXNlIHRoZSBkZWZhdWx0XHJcbiAgICBpZiAoIWVudmlyb25tZW50KSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIC8vIE5vdCBhIHZhbGlkIGVudmlyb25tZW50P1xyXG4gICAgaWYgKCF0aGlzLmlzRW52aXJvbm1lbnRWYWxpZChlbnZpcm9ubWVudCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBlbnZpcm9ubWVudFxyXG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50XHJcblxyXG4gICAgLy8gU2V0IHRoZSBBUEkgdXJsXHJcbiAgICBpZiAoZW52aXJvbm1lbnQgPT09IHRoaXMuZW52aXJvbm1lbnRTdGFnaW5nKSB7XHJcbiAgICAgIHRoaXMuYXBpVXJsID0gdGhpcy5hcGlVcmxTdGFnaW5nXHJcbiAgICAgIHRoaXMuZXZlbnRzVXJsID0gdGhpcy5ldmVudHNVcmxTdGFnaW5nXHJcbiAgICB9IGVsc2UgaWYgKGVudmlyb25tZW50ID09PSB0aGlzLmVudmlyb25tZW50TG9jYWwpIHtcclxuICAgICAgdGhpcy5hcGlVcmwgPSB0aGlzLmFwaVVybExvY2FsXHJcbiAgICAgIHRoaXMuZXZlbnRzVXJsID0gdGhpcy5ldmVudHNVcmxMb2NhbFxyXG4gICAgfSBlbHNlIGlmIChlbnZpcm9ubWVudCA9PT0gdGhpcy5lbnZpcm9ubWVudFByb2R1Y3Rpb24pIHtcclxuICAgICAgdGhpcy5hcGlVcmwgPSB0aGlzLmFwaVVybFByb2R1Y3Rpb25cclxuICAgICAgdGhpcy5ldmVudHNVcmwgPSB0aGlzLmV2ZW50c1VybFByb2R1Y3Rpb25cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50cyB7XHJcbiAgc2Vzc2lvbklkOiBzdHJpbmdcclxuICBzdGFydDogbnVtYmVyXHJcbiAgaW50ZXJhY3Rpb25TZW50OiBib29sZWFuXHJcblxyXG4gIGNvbnN0cnVjdG9yKHNlc3Npb25JZDogc3RyaW5nKSB7XHJcbiAgICAvLyBTZXQgdGhlIGN1cnJlbnQgc2Vzc2lvblxyXG4gICAgdGhpcy5zZXNzaW9uSWQgPSBzZXNzaW9uSWRcclxuXHJcbiAgICB0aGlzLmludGVyYWN0aW9uU2VudCA9IGZhbHNlXHJcblxyXG4gICAgLy8gUmVtZW1iZXIgd2hlbiB3ZSBzdGFydGVkXHJcbiAgICB0aGlzLnN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKClcclxuICAgIHRoaXMuZGV0ZWN0SW50ZXJhY3Rpb24oKVxyXG4gICAgdGhpcy5kZXRlY3RCb3VuY2UoKVxyXG4gICAgdGhpcy5kZXRlY3RXaWRnZXRDbGljaygpXHJcbiAgfVxyXG5cclxuICAvLyBEZXRlY3RzIGNsaWNrIG9uIHRoZSB3aWRnZXRcclxuICBkZXRlY3RXaWRnZXRDbGljayA9ICgpID0+IHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKGU6IEV2ZW50KSA9PiB7XHJcbiAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudFxyXG4gICAgICB2YXIgdGFyZ2V0ID0gKGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCkgYXMgSFRNTERpdkVsZW1lbnRcclxuICAgICAgLy8gR2V0IGNvbnRhaW5lciBmcm9tIHRoZSBjbGlja2VkIGVsZW1lbnRcclxuICAgICAgbGV0IGNvbnRhaW5lciA9IHRhcmdldD8ucGFyZW50RWxlbWVudD8ucGFyZW50RWxlbWVudFxyXG4gICAgICAvLyBTZW5kIG9ubHkgaWYgd2lkZ2V0IGltYWdlIHdhcyBjbGlja2VkXHJcbiAgICAgIGlmIChjb250YWluZXI/LmNsYXNzTGlzdD8uY29udGFpbnMoJ3RvbmljcG93LXdpZGdldCcpKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIC8vIEtlZXBvIHRoaXMgYWJvdmUgc2VuZCB0byBwcmV2ZW50IHNlbmRpbmcgbW91c2Vkb3duIEFORCBjbGljayBvbiBpbml0aWFsIGludGVyYWN0aW9uXHJcbiAgICAgICAgICB0aGlzLmludGVyYWN0aW9uU2VudCA9IHRydWVcclxuICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZEV2ZW50KCdpbnRlcmFjdGlvbicsICdjbGljaycpXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignZmFpbGVkIHRvIHJlcG9ydCBpbnRlcmFjdGlvbjogY2xpY2snLCBlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8vIERldGVjdHMgYSBib3VuY2UgZXZlbnRcclxuICBkZXRlY3RCb3VuY2UgPSAoKSA9PiB7XHJcbiAgICB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aW1lIG9uIHBhZ2VcclxuICAgICAgdGhpcy5zZW5kRXZlbnQoJ2JvdW5jZScsIChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnQpLnRvU3RyaW5nKCkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBEZXRlY3RzIGEgcGFnZSBpbnRlcmFjdGlvblxyXG4gIGRldGVjdEludGVyYWN0aW9uID0gKCkgPT4ge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25TZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZEV2ZW50KCdpbnRlcmFjdGlvbicsICdtb3VzZWRvd24nKVxyXG4gICAgICAgICAgdGhpcy5pbnRlcmFjdGlvblNlbnQgPSB0cnVlXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignZmFpbGVkIHRvIHJlcG9ydCBpbnRlcmFjdGlvbjogbW91c2Vkb3duJywgZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuaW50ZXJhY3Rpb25TZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZEV2ZW50KCdpbnRlcmFjdGlvbicsICdzY3JvbGwnKVxyXG4gICAgICAgICAgdGhpcy5pbnRlcmFjdGlvblNlbnQgPSB0cnVlXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignZmFpbGVkIHRvIHJlcG9ydCBpbnRlcmFjdGlvbjogc2Nyb2xsJywgZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy5pbnRlcmFjdGlvblNlbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5zZW5kRXZlbnQoJ2ludGVyYWN0aW9uJywgJ2tleXByZXNzJylcclxuICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25TZW50ID0gdHJ1ZVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2ZhaWxlZCB0byByZXBvcnQgaW50ZXJhY3Rpb246IGtleXByZXNzJywgZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyBTZW5kIGV2ZW50IHdpbGwgc2VuZCBhbiBldmVudCB0byBUb25pY1Bvd1xyXG4gIHNlbmRFdmVudCA9IGFzeW5jIChldmVudE5hbWU6IHN0cmluZywgZGF0YTogc3RyaW5nKSA9PiB7XHJcbiAgICBpZiAoIXRoaXMuc2Vzc2lvbklkKSB7XHJcbiAgICAgIGNvbnNvbGUuaW5mbygneW91IG11c3QgY2FsbCBpbml0IHdpdGggYSBzZXNzaW9uIGJlZm9yZSBzZW5kaW5nIGV2ZW50cycpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdldCBjb25maWdcclxuICAgIGxldCBjb25maWcgPSBuZXcgQ29uZmlnKClcclxuXHJcbiAgICAvLyB0b2RvOiBvYmZ1c2NhdGUgdGhlIHVybCBwYXJhbXMgKGNoYW5nZSB0byBwYXlsb2FkIG9mIEpTT04/KVxyXG4gICAgYXdhaXQgZmV0Y2goXHJcbiAgICAgIGAke2NvbmZpZy5ldmVudHNVcmx9L3YxL2V2ZW50cz92PSR7Y29uZmlnLnZlcnNpb259Jm5hbWU9JHtldmVudE5hbWV9JnRuY3B3X3Nlc3Npb249JHt0aGlzLnNlc3Npb25JZH0mZGF0YT0ke2RhdGF9YCxcclxuICAgICAgeyBtZXRob2Q6ICdnZXQnIH1cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IENvbmZpZyBmcm9tICcuL2NvbmZpZydcclxuaW1wb3J0IEV2ZW50cyBmcm9tICcuL2V2ZW50cydcclxuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlJ1xyXG5pbXBvcnQgV2lkZ2V0IGZyb20gJy4vdHlwZXMnXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvbmljUG93IHtcclxuICBjb25maWc6IENvbmZpZ1xyXG4gIHN0b3JhZ2U6IFN0b3JhZ2VcclxuICBldmVudHM6IEV2ZW50cyB8IHVuZGVmaW5lZFxyXG4gIHdpZGdldHM6IE1hcDxTdHJpbmcsIHR5cGVvZiBXaWRnZXQgfCBudWxsPlxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIFNldCBuYW1lc3BhY2VzXHJcbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBDb25maWcoKVxyXG4gICAgdGhpcy5zdG9yYWdlID0gbmV3IFN0b3JhZ2UoKVxyXG4gICAgdGhpcy53aWRnZXRzID0gbmV3IE1hcDxTdHJpbmcsIHR5cGVvZiBXaWRnZXQ+KClcclxuXHJcbiAgICAvLyBTdGFydCB0aGUgVG9uaWNQb3cgc2VydmljZSBhbmQgbG9hZCBtb2R1bGVzXHJcblxyXG4gICAgLy8gTG9hZCB0aGUgVG9uaWNQb3cgd2lkZ2V0IHdoZW4gRE9NIGlzIHJlYWR5XHJcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XHJcbiAgICAgIC8vIFRoaXMgbG9hZHMgaWYgdGhlIDxzY3JpcHQ+IGlzIGR5bmFtaWNhbGx5IGluamVjdGVkIGludG8gdGhlIHBhZ2VcclxuICAgICAgdGhpcy5sb2FkKClcclxuICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cygpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBUaGlzIGxvYWRzIGlmIHRoZSA8c2NyaXB0PiBpcyBoYXJkY29kZWQgaW4gdGhlIGh0bWwgcGFnZSBpbiB0aGUgPGhlYWQ+XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkKClcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnRzKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHJlZ2lzdGVyRXZlbnRzIC1SZWdpc3RlcnMgZXZlbnQgbGlzdGVuZXJzLiBSdW5zIG9ubHkgb25jZVxyXG4gIHJlZ2lzdGVyRXZlbnRzID0gKCkgPT4ge1xyXG4gICAgaWYgKCF0aGlzLmV2ZW50cykge1xyXG4gICAgICAvLyBSZWdpc3RlciBldmVudHMgaWYgd2UgaGF2ZSBhIHZhbGlkIHNlc3Npb25cclxuICAgICAgbGV0IHNlc3Npb24gPSB0aGlzLmdldFZpc2l0b3JTZXNzaW9uKClcclxuICAgICAgLy8gVE9ETzogVmFsaWRhdGUgc2Vzc2lvbiBoZXJlXHJcbiAgICAgIGlmIChzZXNzaW9uICYmIHNlc3Npb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSBuZXcgRXZlbnRzKHNlc3Npb24pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHNldE9yZW8gZm9yIGNyZWF0aW5nIG5ldyBvcmVvc1xyXG4gIHNldE9yZW8gPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBkYXlzOiBudW1iZXIpID0+IHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpXHJcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAyNCAqIDYwICogNjAgKiAxMDAwICogZGF5cylcclxuICAgIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSR7dmFsdWV9O3BhdGg9LztleHBpcmVzPSR7ZGF0ZS50b1VUQ1N0cmluZygpfWBcclxuICB9XHJcblxyXG4gIC8vIGNhcHR1cmVWaXNpdG9yU2Vzc2lvbiB3aWxsIGNhcHR1cmUgdGhlIHNlc3Npb24gYW5kIHN0b3JlIGl0XHJcbiAgLy8gQnVpbGRzIGEgY29va2llIHNvIGl0J3Mgc2VudCBvbiByZXF1ZXN0cyBhdXRvbWF0aWNhbGx5XHJcbiAgLy8gU3RvcmVzIGluIGxvY2FsIHN0b3JhZ2UgZm9yIGVhc3kgYWNjZXNzIGZyb20gdGhlIGFwcGxpY2F0aW9uXHJcbiAgY2FwdHVyZVZpc2l0b3JTZXNzaW9uID0gKGN1c3RvbVNlc3Npb25JZDogc3RyaW5nID0gJycpID0+IHtcclxuICAgIGxldCBzZXNzaW9uSWQgPSBjdXN0b21TZXNzaW9uSWRcclxuXHJcbiAgICBpZiAoKCFjdXN0b21TZXNzaW9uSWQgfHwgIWN1c3RvbVNlc3Npb25JZC5sZW5ndGgpICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaClcclxuICAgICAgc2Vzc2lvbklkID0gdXJsUGFyYW1zLmdldCh0aGlzLmNvbmZpZy5zZXNzaW9uTmFtZSkgfHwgJydcclxuICAgIH1cclxuICAgIGlmIChzZXNzaW9uSWQgJiYgc2Vzc2lvbklkLmxlbmd0aCA+IDApIHtcclxuICAgICAgdGhpcy5zZXRPcmVvKHRoaXMuY29uZmlnLnNlc3Npb25OYW1lLCBzZXNzaW9uSWQsIHRoaXMuY29uZmlnLm1heFNlc3Npb25EYXlzKVxyXG4gICAgICB0aGlzLnN0b3JhZ2Uuc2V0U3RvcmFnZShcclxuICAgICAgICB0aGlzLmNvbmZpZy5zZXNzaW9uTmFtZSxcclxuICAgICAgICBzZXNzaW9uSWQsXHJcbiAgICAgICAgMjQgKiA2MCAqIDYwICogdGhpcy5jb25maWcubWF4U2Vzc2lvbkRheXNcclxuICAgICAgKVxyXG4gICAgICByZXR1cm4gc2Vzc2lvbklkXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLy8gZ2V0VmlzaXRvclNlc3Npb24gd2lsbCBnZXQgdGhlIHNlc3Npb24gaWYgaXQgZXhpc3RzXHJcbiAgZ2V0VmlzaXRvclNlc3Npb24gPSAoKSA9PiB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmFnZSh0aGlzLmNvbmZpZy5zZXNzaW9uTmFtZSlcclxuXHJcbiAgLy8gbG9hZERpdnMgcmVwbGFjZXMgZWFjaCBUb25pY1BvdyBkaXYgd2l0aCBhIGNvcnJlc3BvbmRpbmcgZW1iZWQgd2lkZ2V0XHJcbiAgbG9hZERpdnMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBHZXQgYWxsIGRpdnNcclxuICAgIGNvbnN0IHRvbmljRGl2cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUodGhpcy5jb25maWcud2lkZ2V0RGl2Q2xhc3MpXHJcblxyXG4gICAgLy8gTG9vcCBhbGwgZGl2cyB0aGF0IHdlIGZvdW5kXHJcbiAgICBmb3IgKGxldCBpID0gdG9uaWNEaXZzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgIC8vIFNldCB0aGUgZGl2XHJcbiAgICAgIGNvbnN0IHRvbmljRGl2ID0gdG9uaWNEaXZzW2ldIGFzIEhUTUxEaXZFbGVtZW50XHJcblxyXG4gICAgICAvLyBOb3Qgc3VyZSB3aHkgdGhpcyBpcyBuZWVkZWQgYnV0IGVuY291bnRlcmVkIHRoaXMgaW4gcHJvZCAzLzUvMjAyMSAtIGx1a2VcclxuICAgICAgaWYgKCF0b25pY0Rpdikge1xyXG4gICAgICAgIGNvbnRpbnVlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdldCB0aGUgd2lkZ2V0IGlkXHJcbiAgICAgIGNvbnN0IHdpZGdldElkID0gdG9uaWNEaXYuZ2V0QXR0cmlidXRlKHRoaXMuY29uZmlnLndpZGdldElkKVxyXG4gICAgICBpZiAoIXdpZGdldElkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7d2lkZ2V0SWR9IG5vdCBmb3VuZGApXHJcbiAgICAgICAgY29udGludWVcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gR2V0IHRoZSBjdXN0b20gZW52aXJvbm1lbnQgKHN3aXRjaGluZyBhd2F5IGZyb20gZGVmYXVsdDogcHJvZHVjdGlvbilcclxuICAgICAgY29uc3QgY3VzdG9tRW52aXJvbm1lbnQgPSB0b25pY0Rpdi5nZXRBdHRyaWJ1dGUodGhpcy5jb25maWcuY3VzdG9tRW52aXJvbm1lbnQpXHJcbiAgICAgIHRoaXMuY29uZmlnLnNldEVudmlyb25tZW50KGN1c3RvbUVudmlyb25tZW50IHx8ICdwcm9kdWN0aW9uJylcclxuXHJcbiAgICAgIC8vIEFkZCB0byB3aWRnZXRzIG1hcFxyXG4gICAgICB0aGlzLndpZGdldHMuc2V0KHdpZGdldElkLCBudWxsKVxyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBGaXJlIHRoZSByZXF1ZXN0IHRvIGxvYWQgdGhlIHdpZGdldCBkYXRhXHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgICAgYCR7dGhpcy5jb25maWcuYXBpVXJsfS92MS93aWRnZXRzL2Rpc3BsYXkvJHt3aWRnZXRJZH0/cHJvdmlkZXI9ZW1iZWQtJHt0aGlzLmNvbmZpZy52ZXJzaW9ufWBcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcHJvbWlzZS5qc29uKClcclxuXHJcbiAgICAgICAgLy8gU2V0IFVSSSBlbmNvZGVkIHRpdGxlXHJcbiAgICAgICAgY29uc3QgY2FtcGFpZ25UaXRsZSA9IGVuY29kZVVSSUNvbXBvbmVudChyZXNwb25zZS50aXRsZSlcclxuXHJcbiAgICAgICAgLy8gU2V0IHRoZSBIVE1MXHJcbiAgICAgICAgdG9uaWNEaXYuaW5uZXJIVE1MID0gYFxyXG4gICAgICA8YSBocmVmPVwiJHtyZXNwb25zZS5saW5rX3VybH0/dXRtX3NvdXJjZT10b25pY3Bvdy13aWRnZXRzJnV0bV9tZWRpdW09d2lkZ2V0JnV0bV9jYW1wYWlnbj0ke3dpZGdldElkfSZ1dG1fY29udGVudD0ke2NhbXBhaWduVGl0bGV9XCIgc3R5bGU9XCJkaXNwbGF5OiBibG9ja1wiPlxyXG4gICAgICA8aW1nIHNyYz1cIiR7cmVzcG9uc2UuaW1hZ2VfdXJsfVwiIFxyXG4gICAgICBpZD1cIiR7d2lkZ2V0SWR9XCJcclxuICAgICAgd2lkdGg9XCIke3Jlc3BvbnNlLndpZHRofVwiIFxyXG4gICAgICBoZWlnaHQ9XCIke3Jlc3BvbnNlLmhlaWdodH1cIiBcclxuICAgICAgYWx0PVwiJHtyZXNwb25zZS50aXRsZX1cIiAvPlxyXG4gICAgICA8L2E+YFxyXG4gICAgICAgIC8vIFNldCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXHJcbiAgICAgICAgdG9uaWNEaXYuc2V0QXR0cmlidXRlKCdkYXRhLXdpZHRoJywgcmVzcG9uc2Uud2lkdGgpXHJcbiAgICAgICAgdG9uaWNEaXYuc2V0QXR0cmlidXRlKCdkYXRhLWhlaWdodCcsIHJlc3BvbnNlLmhlaWdodClcclxuXHJcbiAgICAgICAgLy8gQWRkIHRvIHdpZGdldHMgbWFwXHJcbiAgICAgICAgdGhpcy53aWRnZXRzLnNldCh3aWRnZXRJZCwgcmVzcG9uc2UgYXMgdHlwZW9mIFdpZGdldClcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnQ291bGQgbm90IGRpc3BsYXkgd2lkZ2V0OicsIGUpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIExvYWQgdGhlIFRvbmljUG93IHNjcmlwdChzKSBhbmQgZGVmYXVsdCBzZXR0aW5nc1xyXG4gIGxvYWQgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBXZSBvbmx5IHdvcmsgaW4gYSBicm93c2VyXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignVG9uaWNQb3cgZW1iZWQgb25seSB3b3JrcyBpbiB0aGUgYnJvd3NlcicpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIC8vIExvYWQgYWxsIHRvbmljcyBmb3VuZCBvbiB0aGUgcGFnZSAoaWYgd2UgaGF2ZSBkaXYpXHJcbiAgICBjb25zdCB0b25pY0RpdnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHRoaXMuY29uZmlnLndpZGdldERpdkNsYXNzKVxyXG4gICAgaWYgKHRvbmljRGl2cyAmJiB0b25pY0RpdnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBhd2FpdCB0aGlzLmxvYWREaXZzKClcclxuICAgICAgY29uc29sZS5sb2coJyVjIFRvbmljUG93IHdpZGdldChzKSBsb2FkZWQhICcsICdiYWNrZ3JvdW5kOiAjOTc0Q0QyOyBjb2xvcjogI2ZmZicpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvY2VzcyB2aXNpdG9yIHRva2VuXHJcbiAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5jYXB0dXJlVmlzaXRvclNlc3Npb24oKVxyXG5cclxuICAgIC8vIENhcHR1cmUgZXZlbnRzIGlmIHdlIGhhdmUgYSBzZXNzaW9uXHJcbiAgICBpZiAoc2Vzc2lvbikge1xyXG4gICAgICB0aGlzLmV2ZW50cyA9IG5ldyBFdmVudHMoc2Vzc2lvbilcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEF1dG8tbG9hZCBhbmQgc2V0IG9uIHdpbmRvd1xyXG47KHdpbmRvdyBhcyBhbnkpLlRvbmljUG93ID0gbmV3IFRvbmljUG93KCkgfHwge31cclxuIiwiLyogZ2xvYmFsIGxvY2FsU3RvcmFnZSAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmFnZSB7XHJcbiAgLypcclxuICByZW1vdmVTdG9yYWdlOiByZW1vdmVzIGEga2V5IGZyb20gbG9jYWxTdG9yYWdlIGFuZCBpdHMgc2libGluZyBleHBpcmFjeSBrZXlcclxuICBwYXJhbXM6XHJcbiAgICAgIGtleSA8c3RyaW5nPiA6IGxvY2FsU3RvcmFnZSBrZXkgdG8gcmVtb3ZlXHJcbiAgcmV0dXJuczpcclxuICAgICAgPGJvb2xlYW4+IDogdGVsbGluZyBpZiBvcGVyYXRpb24gc3VjY2VlZGVkXHJcbiAgKi9cclxuICByZW1vdmVTdG9yYWdlID0gKG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSlcclxuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oYCR7bmFtZX1fZXhwaXJlc0luYClcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coXHJcbiAgICAgICAgYHJlbW92ZVN0b3JhZ2U6IEVycm9yIHJlbW92aW5nIGtleSBbJHtuYW1lfV0gZnJvbSBsb2NhbFN0b3JhZ2U6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YFxyXG4gICAgICApXHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgZ2V0U3RvcmFnZTogcmV0cmlldmVzIGEga2V5IGZyb20gbG9jYWxTdG9yYWdlIHByZXZpb3VzbHkgc2V0IHdpdGggc2V0U3RvcmFnZSgpLlxyXG4gIHBhcmFtczpcclxuICAgICAga2V5IDxzdHJpbmc+IDogbG9jYWxTdG9yYWdlIGtleVxyXG4gIHJldHVybnM6XHJcbiAgICAgIDxzdHJpbmc+IDogdmFsdWUgb2YgbG9jYWxTdG9yYWdlIGtleVxyXG4gICAgICBudWxsIDogaW4gY2FzZSBvZiBleHBpcmVkIGtleSBvciBmYWlsdXJlXHJcbiAgKi9cclxuICBnZXRTdG9yYWdlID0gKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAvLyBlcG9jaCB0aW1lLCBsZXRzIGRlYWwgb25seSB3aXRoIGludGVnZXJcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcclxuXHJcbiAgICAvLyBTZXQgZXhwaXJhdGlvbiBmb3Igc3RvcmFnZVxyXG4gICAgbGV0IGV4cGlyZXNcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBleHBpcmVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7a2V5fV9leHBpcmVzYClcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS5sb2coYGdldEl0ZW06IGVycm9yIGdldHRpbmcgbG9jYWxTdG9yYWdlOiAke0pTT04uc3RyaW5naWZ5KGUpfWApXHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4cGlyZXMgPT09IHVuZGVmaW5lZCB8fCBleHBpcmVzID09PSBudWxsKSB7XHJcbiAgICAgIGV4cGlyZXMgPSAwXHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXhwaXJlZFxyXG4gICAgaWYgKGV4cGlyZXMgPCBub3cpIHtcclxuICAgICAgdGhpcy5yZW1vdmVTdG9yYWdlKGtleSlcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZXQgdGhlIGV4aXN0aW5nIGl0ZW1cclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBnZXRTdG9yYWdlOiBFcnJvciByZWFkaW5nIGtleSBbJHtrZXl9XSBmcm9tIGxvY2FsU3RvcmFnZTogJHtKU09OLnN0cmluZ2lmeShlKX1gKVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLypcclxuICBzZXRTdG9yYWdlOiB3cml0ZXMgYSBrZXkgaW50byBsb2NhbFN0b3JhZ2Ugc2V0dGluZyBhIGV4cGlyZSB0aW1lXHJcbiAgcGFyYW1zOlxyXG4gICAgICBrZXkgPHN0cmluZz4gICAgIDogbG9jYWxTdG9yYWdlIGtleVxyXG4gICAgICB2YWx1ZSA8c3RyaW5nPiAgIDogbG9jYWxTdG9yYWdlIHZhbHVlXHJcbiAgICAgIGV4cGlyZXMgPG51bWJlcj4gOiBudW1iZXIgb2Ygc2Vjb25kcyBmcm9tIG5vdyB0byBleHBpcmUgdGhlIGtleVxyXG4gIHJldHVybnM6XHJcbiAgICAgIDxib29sZWFuPiA6IHRlbGxpbmcgaWYgb3BlcmF0aW9uIHN1Y2NlZWRlZFxyXG4gICovXHJcbiAgc2V0U3RvcmFnZSA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZXhwaXJlczogbnVtYmVyIHwgbnVsbCA9IG51bGwpID0+IHtcclxuICAgIC8vIEV4cGlyZWQgdGltZVxyXG4gICAgaWYgKGV4cGlyZXMpIHtcclxuICAgICAgZXhwaXJlcyA9IE1hdGguYWJzKGV4cGlyZXMpIC8vIG1ha2Ugc3VyZSBpdCdzIHBvc2l0aXZlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBleHBpcmVzID0gMjQgKiA2MCAqIDYwIC8vIGRlZmF1bHQ6IHNlY29uZHMgZm9yIDEgZGF5XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWlsbGkgc2Vjb25kcyBzaW5jZSBlcG9jaCB0aW1lLCBsZXRzIGRlYWwgb25seSB3aXRoIGludGVnZXJcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcclxuICAgIGNvbnN0IHNjaGVkdWxlID0gbm93ICsgZXhwaXJlcyAqIDEwMDBcclxuICAgIHRyeSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpXHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke2tleX1fZXhwaXJlc2AsIHNjaGVkdWxlLnRvU3RyaW5nKCkpXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBzZXRTdG9yYWdlOiBFcnJvciBzZXR0aW5nIGtleSBbJHtrZXl9XSBpbiBsb2NhbFN0b3JhZ2U6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YClcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDcpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==